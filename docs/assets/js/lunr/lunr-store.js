var store = [{
        "title": "First Post",
        "excerpt":"Phew, just finished the basic setup of my brand-new blog-site. It took almost five hours to get here. Working with Octopress was fun. Setting up a blog on commandline is way cooler than doing it the wordpress style. Of course, Octopress drew me to itself with its subtitle:  A blogging framework for hackers.I noticed Divya Manian move her blog to Octopress. After looking up Octopress and what people feel about it (everyone seems to like it), I decided to try it myself.After reading almost all of the Octopress site, I cloned the Octopress repo, setup a Disqus account for the site and plugged in account into the config files. All commands are run through rake, which makes it as easy as:rake new_page[page_title]   # create a new page  rake new_post[post_title]   # create a new post  rake preview                # fire up a local server and preview the site at localhost:4000  rake deploy                 # Make it live! :)Just now realized that syntax highlighting breaks on Windows. Gotta find a fix for it soon. The Google Fonts were making the pages render slower, so I am thinking if they should be removed. The styles look good, but will spend some time on the CSS and fiddle around with it. Compass and SASS are new to me, more CSS frameworks to learn :(.That’s it folks for now, will update with more changes I am planning to the site.","categories": [],
        "tags": [],
        "url": "http://localhost:4000/first-post",
        "teaser":null},{
        "title": "Viral Loop & the Lean Startup",
        "excerpt":"Disruption of internet service can make you do things you wouldn’t have imagined doing anytime soon. For me this weekend, it was reading books that have long been collecting dust on my desk. I read Viral Loop on Saturday and The Lean Startup on Sunday. These bullet points are just a way for me to recall what I learned from these books.Viral Loop (Adam Penenberg)  Viral expansion loop          Viral loop      Viral network      Double viral loop        Collective curation  Viral businesses          Tupperware and Ponzi-scheme (Pyramid schemes), Netscape      Spreadable product      Virality Coefficient        Characteristics of Viral loop businesses          Web-based      Free      Organizational technology      Simple concept      Built-in Virality      Extreme fast adoption (Hotmail, Facebook, Skype)      Virality Index (&gt; 1.0)      Predictable growth rates      Network effects (Telephone, IMs, social networks)      Stackability (on another viral business)      Point of nondisplacement      Ultimate saturation        Viral Marketing          Hotmail (remember Get your free email at Hotmail in email footer?)        Viral Networks          eBay      PayPal stacked over eBay      MySpace      Flickr and YouTube stacked over MySpace        Scaling issues of (almost) every viral product          eBay, Twitter        Long tail vs heavy tailIn the end, it just felt like reading stories of a couple of internet successes, but was an interesting read nevertheless.The Lean Startup (Eric Ries)  Entrepreneurs are everywhere  Entrepreneurship is management  Incremental innovation vs disruptive innovation  Validated learning  Develop an MVP  Eliminate uncertainity - Test assumptions  Innovation accounting - vanity metrics and actionable metrics  Split testing (A/B testing)  Kanban principle:          Four stages of development of features:                  Product backlog          Actively being built          Done (technically)          Being validated                      Argument resolution through split test reports  Three A’s of metrics:          Actionable      Accessible      Auditable        Pivot: Changing course with one foot anchored to the ground  Different pivots(and the Votizen story):          zoom-in pivot      customer segment pivot      Customer need pivot      platform pivot      plus more        Pivot or Persevere  Single piece flow &amp; effect of batch size          Large batch spiral death        Countinuous innovation and continuous deployment  Build-measure-learn cycle and planning it backward  Controlled scaling (Gmail)  The five why’s  User story for every feature  Collect and organize feedback from various forumsYou can find lots of common references between these two books. Overall, it has been an entertaining and meaningful journey. I recommend these books to anyone building a product s/he’s is expecting to take over the world. Now that these two books are off my to-read list, wondering what to read next… Toyota Production System by Taiichi Ohno?","categories": ["books"],
        "tags": [],
        "url": "http://localhost:4000/viral-loop-and-the-lean-startup",
        "teaser":null},{
        "title": "Partitioning Complexity",
        "excerpt":"Kent Beck’s thoughts on managing complexity. Gem of an article.Many useful tips for software development.(via http://softwareleadweekly.com/issues/262)","categories": ["link"],
        "tags": ["link"],
        "url": "http://localhost:4000/partition-complexity",
        "teaser":null},{
        "title": "Time Management (slides)",
        "excerpt":"Practical and easily applicable tips on managing the scarcest resource in our life(via http://softwareleadweekly.com/issues/266)","categories": ["link"],
        "tags": ["link"],
        "url": "http://localhost:4000/time-management-slides",
        "teaser":null},{
        "title": "Understanding Elasticsearch bottom up",
        "excerpt":"Understanding Elasticsearch  https://www.elastic.co/blog/found-elasticsearch-from-the-bottom-up  Inverted index          Dictionary contains term and frequency, postings contain documents (IDs)      Index term being unit of search      Prefix searches are efficient, contains searches are not      Modelling problems as prefix searches                  Suffix matching - indexing reversed words          Contains matching - split words into n-grams          Decompound compound words          Geo coordinates - as geo hashes          Numerical and time ranges - store values trie-like          etc                      Building indexes          Prioritize                  search speed          index compactness          indexing speed          time to be visible                    Small index, faster search      Lucene indexes immutable      Deletions are only marked      Updates = delete + reinsert                  Updating is costlier than inserting                    Index changes buffered in memory, eventually flushed (lucene) to disk = index segment        Index segments          Advancements with lucene versions                  Lucene &lt;2.3 would make a segment for each doc, which were merged on flush          Nowadays, can make larger in-memory segments          Lucene 4 - one segment per thread - increased indexing performance, concurrent flushing          Flushing segments invalidates field and filter caches (which are per-segment)                      Elasticsearch indexes          ES Index -&gt; 1/more shards with 0/more replicas = lucene indexes -&gt; 1/more index segments      Elasticsearch in production  https://www.elastic.co/blog/found-elasticsearch-in-production  Complicated system. Requires          network stability      Huge memory      assumptions that all users are trustworthy (are they?)      ","categories": [],
        "tags": [],
        "url": "http://localhost:4000/understanding-es",
        "teaser":null},{
        "title": "Dagger 2.0 Proposal",
        "excerpt":"Found this beatiful document from Greg Kick making a proposal for fully statically resolved dependency injection framework on Dagger 1 Github issues.This proposal is historically significant as it brings in a new generation of java dependency injection framework which is completely code generated. This avoids reflection altogether which is expensive in terms of CPU cycles (and much more so on Android).via https://github.com/square/dagger/issues/366","categories": ["link"],
        "tags": ["link"],
        "url": "http://localhost:4000/dagger-2-proposal",
        "teaser":null},{
        "title": "The Internet Tidal Wave",
        "excerpt":"Bill Gates wrote this fascinating memo to his staff in 1995. It predicts the evolution of internet ecosystem, how almost every service would be touched by it and why it was super-important to be an internet player.via Deep Work","categories": ["link"],
        "tags": ["link"],
        "url": "http://localhost:4000/internet-tidal-wave",
        "teaser":null}]
